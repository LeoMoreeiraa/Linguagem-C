#include <stdio.h>
#include <stdlib.h>

//Define o tamanho máximo da imagem para 300x300 pixels
#define MAX_N 300
#define MAX_M 300

//Cria a variável resultado com um valor alto para que não haja problema para printar o resultado
char resultado[MAX_N * MAX_M * 4];

//Cria a variável eHomogeneo para verificar se o retângulo dado tem a mesma cor, se sim retorna 1, caso contrário retorna 0
int eHomogeneo(int imagem[MAX_N][MAX_M], int linhaInicial, int linhaFinal, int colunaInicial, int colunaFinal) {
    int i, j;
    int homogeneo = 1;

  //Cria um laço de repetição para percorrer a imagem 
    for (i = linhaInicial; i < linhaFinal && homogeneo; i++) {
        for (j = colunaInicial; j < colunaFinal && homogeneo; j++) {
          //Cria uma condicional para verificar se a cor da posição atual é igual a cor da posição anterior
            if (imagem[i][j] != imagem[linhaInicial][colunaInicial]) {
                homogeneo = 0;
            }
        }
    }

    return homogeneo;
}

//Cria um ponteiro para a divisão de imagens, para que haja fluidez na função e atualização do valor resultado na posição correta de acordo com as divisões da imagem
char* divisaoImagem(int imagem[MAX_N][MAX_M], int linhaInicial, int linhaFinal, int colunaInicial, int colunaFinal, int* index, int level) {
    //Verifica se a imagem é menor que 2x2, caso seja é verificado se a imagem é homogênea e printa a cor da imagem, porém, se não for homogênea divide-a em 2 quadrantes e printa as duas cores
    if (linhaFinal - linhaInicial < 2 || colunaFinal - colunaInicial < 2) {
        if (eHomogeneo(imagem, linhaInicial, linhaFinal, colunaInicial, colunaFinal)) {
            resultado[(*index)++] = (imagem[linhaInicial][colunaInicial] == 0) ? 'B' : 'P';
        } else {
            resultado[(*index)++] = 'X';
            resultado[(*index)++] = (imagem[linhaInicial][colunaInicial] == 0) ? 'B' : 'P';
            resultado[(*index)++] = (imagem[linhaInicial][colunaInicial + 1] == 0) ? 'B' : 'P';
        }
    //Por outro lado se a imagem for maior que 2x2 utiliza-se a segunda parte do código a partir da recursão se necessário
    } else if (eHomogeneo(imagem, linhaInicial, linhaFinal, colunaInicial, colunaFinal)) {
        //Se a imagem for homogênea, não é necessário fazer outra divisão da imagem e printa a cor da mesma
        resultado[(*index)++] = (imagem[linhaInicial][colunaInicial] == 0) ? 'B' : 'P';
    } else {
        //Se não for homogêneo, começa a divisão para as subimagens
        int linhaMedia = (linhaInicial + linhaFinal + 1) / 2;
        int colunaMedia = (colunaInicial + colunaFinal + 1) / 2; 

        //Ao entrar na subimagem o X é colocado na string resultado
        resultado[(*index)++] = 'X';

        //Uso da recurssão para processar cada quadrante e reinício de todo o processo
        divisaoImagem(imagem, linhaInicial, linhaMedia, colunaInicial, colunaMedia, index, level + 1);     // 1° quadrante
        divisaoImagem(imagem, linhaInicial, linhaMedia, colunaMedia, colunaFinal, index, level + 1);       // 2° quadrante
        divisaoImagem(imagem, linhaMedia, linhaFinal, colunaInicial, colunaMedia, index, level + 1);       // 3° quadrante
        divisaoImagem(imagem, linhaMedia, linhaFinal, colunaMedia, colunaFinal, index, level + 1);         // 4° quadrante
    }

    return resultado;
}

int main() {
    int N, M;

    char opcao;
    do{
        //Menu para escolher se deseja digitar manualmente a imagem, puxar um arquivo, se deseja ajuda para o uso do programa ou sair do programa
        printf("Escolha o modo de entrada:\n");
        printf("-m: Manual\n");
        printf("-f: Arquivo\n");
        printf("-?: Ajuda\n");
        printf("-s: Sair\n");
        scanf(" %c", &opcao);

        if (opcao == 's') {
            break;
        }

        if (opcao == 'm') {
            printf("Insira o número de linhas: ");
            scanf("%d", &N);

            printf("Insira o número de colunas: ");
            scanf("%d", &M);

            //Verifica o tamanho da imagem
            if (N > MAX_N || M > MAX_M) {
                printf("Excedeu as dimensões máximas da imagem. Tente novamente.\n");
                return 1;
            }

            int imagem[MAX_N][MAX_M];

            printf("Insira a imagem binária:\n");

            for (int i = 0; i < N; i++) {
                for (int j = 0; j < M; j++) {
                    scanf("%d", &imagem[i][j]);
                }
            }

            //É utilizado um ponteiro index somado a string resultado, isso faz com que a recursão funcione corretamente e adiciona os valores de "X", "P", e "B" na posição certa à medida que a recursividade progride
            int index = 0;

            //Chamada para executar o código principal do projeto utilizando um ponteiro para que não haja caracteres inúteis e saia apenas o desejado
            char* resultadoString = divisaoImagem(imagem, 0, N, 0, M, &index, 1);

            printf("Resultado: %s\n", resultadoString);

        } else if (opcao == 'f') {
            printf("Insira o número de linhas e colunas, seguido da imagem binária:\n");
            scanf("%d %d", &N, &M);

            if (N > MAX_N || M > MAX_M) {
                printf("Excedeu as dimensões máximas da imagem. Tente novamente.\n");
                return 1;
            }

            int imagem[MAX_N][MAX_M];

            for (int i = 0; i < N; i++) {
                for (int j = 0; j < M; j++) {
                    scanf("%d", &imagem[i][j]);
                }
            }

            int index = 0;

            char* resultadoString = divisaoImagem(imagem, 0, N, 0, M, &index, 1);

            printf("Resultado: %s\n", resultadoString);

        } else if (opcao == '?') {
            printf("Ajuda:\n");
            printf("-m: Modo manual\n");
            printf("-f: Modo arquivo\n");
            printf("-?: Ajuda (este menu)\n");
            printf("-s: Sair do menu\n");
        } else {
            printf("Opção inválida.\n");
        }
    } while (opcao != 's');

    return 0;
}
